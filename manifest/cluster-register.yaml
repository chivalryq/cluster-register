# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: cluster-register
  namespace: vela-system
spec:
  workload:
    definition:
      apiVersion: batch/v1
      kind: Job
  schematic:
    cue:
      template: |
        output: {
        	apiVersion: "batch/v1"
        	kind:       "Job"
        	spec: {
        		template: {
        			spec: {
        				containers: [{
        					name: context.name
        					env: [{
        						name: "POD_NAMESPACE"
        						valueFrom: fieldRef: fieldPath: "metadata.namespace"
        					}]
        					image:           "oamdev/cluster-register:v1.0"
        					imagePullPolicy: "Always"
        					command: [
        						"/app", "--cluster-name=" + "\(clusterInfo.name)",
        						"--hub-api-server=" + "\(parameter.hubAPIServer)",
        						"--cluster-ca-cert=" + "\(clusterInfo.cluster_ca_cert)",
        						"--client-cert=" + "\(clusterInfo.client_cert)",
        						"--client-key=" + "\(clusterInfo.client_key)",
        						"--api-server-internet=" + "\(clusterInfo.api_server_internet)",
        						"--kube-config=" + "\(clusterInfo.kubeconfig)",
        					]
        				}]
        				restartPolicy:      "OnFailure"
        				serviceAccountName: "cluster-register"
        			}
        		}
        	}
        }

        outputs: clusterrole: {
        	apiVersion: "rbac.authorization.k8s.io/v1"
        	kind:       "ClusterRole"
        	metadata: {
        		name: "cluster-register"
        	}
        	rules: [{
        		apiGroups: [""]
        		resources: ["configmaps", "namespaces", "serviceaccounts", "services", "secrets"]
        		verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
        	}, {
        		apiGroups: ["", "events.k8s.io"]
        		resources: ["events"]
        		verbs: ["create", "update", "patch"]
        	}, {
        		apiGroups: ["rbac.authorization.k8s.io"]
        		resources: ["clusterrolebindings", "rolebindings"]
        		verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
        	}, {
        		apiGroups: ["rbac.authorization.k8s.io"]
        		resources: ["clusterroles", "roles"]
        		verbs: ["create", "get", "list", "update", "watch", "patch", "delete", "escalate", "bind"]
        	}, {
        		apiGroups: ["rbac.authorization.k8s.io"]
        		resources: ["clusterroles", "roles"]
        		verbs: ["create", "get", "list", "update", "watch", "patch", "delete", "escalate", "bind"]
        	}, {
        		apiGroups: ["certificates.k8s.io"]
        		resources: ["certificatesigningrequests"]
        		verbs: ["create", "get", "list", "watch"]
        	}, {
        		apiGroups: ["certificates.k8s.io"]
        		resources: ["certificatesigningrequests/approval"]
        		verbs: ["update"]
        	}, {
        		apiGroups: ["certificates.k8s.io"]
        		resources: ["signers"]
        		resourceNames: ["kubernetes.io/*"]
        		verbs: ["approve"]
        	}, {
        		apiGroups: ["cluster.open-cluster-management.io"]
        		resources: ["managedclusters"]
        		verbs: ["create", "get", "list", "update", "watch", "delete"]
        	}, {
        		apiGroups: ["register.open-cluster-management.io"]
        		resources: ["managedclusters", "managedclusters/accept"]
        		verbs: ["create", "get", "list", "update", "watch", "delete"]
        	}]
        }

        outputs: serviceaccount: {
        	apiVersion: "v1"
        	kind:       "ServiceAccount"
        	metadata: {
        		name:      "cluster-register"
        		namespace: context.namespace
        	}
        }

        outputs: rolebinding: {
        	apiVersion: "rbac.authorization.k8s.io/v1"
        	kind:       "ClusterRoleBinding"
        	metadata: {
        		name: "cluster-register"
        	}
        	roleRef: {
        		apiGroup: "rbac.authorization.k8s.io"
        		kind:     "ClusterRole"
        		name:     "cluster-register"
        	}
        	subjects: [{
        		kind:      "ServiceAccount"
        		name:      "cluster-register"
        		namespace: context.namespace
        	}]
        }

        parameter: {
        	// +insertSecretTo=clusterInfo
        	clusterSecret: string

        	hubAPIServer: *"" | string
        }

        clusterInfo: {
        	name:                *"" | string
        	cluster_ca_cert:     *"" | string
        	client_cert:         *"" | string
        	client_key:          *"" | string
        	api_server_internet: *"" | string
        	kubeconfig:          *"" | string
        }
